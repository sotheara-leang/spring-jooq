buildscript {
    repositories {
    	maven {
		 	url "https://plugins.gradle.org/m2/"
		}
		jcenter()
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.0.RELEASE'
        classpath 'io.franzbecker:gradle-lombok:1.8'
        classpath 'nu.studer:gradle-jooq-plugin:2.0.7'
        classpath 'gradle.plugin.com.boxfuse.client:flyway-release:4.2.0'
        classpath 'com.h2database:h2:1.4.177'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'io.franzbecker.gradle-lombok'
apply plugin: 'nu.studer.jooq'
apply plugin: 'org.flywaydb.flyway'

ext {
	jdkVersion = 1.8
	logbackExtSpringVersion = '0.1.4'
}

def props = new Properties()

file("src/main/resources/conf/application.properties").withInputStream { props.load(it) }
	
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/generated-source/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}


repositories {
    jcenter()
}

dependencyManagement {
    imports {
        mavenBom 'io.spring.platform:platform-bom:Brussels-SR2'
    }
}

flyway {
    url = props.getProperty('db.url')
    user = props.getProperty('db.username')
    password = props.getProperty('db.password')
}

jooq {
   version = '3.9.5'
   edition = 'OSS'
   sample(sourceSets.main) {
       jdbc {
           driver = props.getProperty('db.driver')
           url = props.getProperty('db.url')
           user = props.getProperty('db.username')
           password = props.getProperty('db.password')
           // ...
       }
       generator {
           name = 'org.jooq.util.DefaultGenerator'
           strategy {
               name = 'org.jooq.util.DefaultGeneratorStrategy'
               // ...
           }
           database {
               name = 'org.jooq.util.h2.H2Database'
               inputSchema = 'PUBLIC'
               // ...
           }
           generate {
               deprecated = false
               relations = true
               records = true
               immutablePojos = false
               pojos = true
               daos = true
               pojosEqualsAndHashCode = true
               links = false
               springAnnotations = true
               fluentSetters = true
               globalLinkReferences = false
               varargSetters = false
               // ...
           }
           target {
               packageName = 'com.example.springjooq.jooq'
               directory = 'build/generated-source/java'
           }
       }
   }
}
 
dependencies {
   	// logback
   	compile "ch.qos.logback:logback-classic"
    compile "org.slf4j:jcl-over-slf4j"
    compile "org.logback-extensions:logback-ext-spring:$logbackExtSpringVersion"
    compile "org.codehaus.janino:janino:"
    
	// spring
	compile ('org.springframework:spring-context') {
        exclude module: 'commons-logging:commons-logging'
    }
    compile 'org.springframework:spring-jdbc'
    
    // test
    testCompile 'junit:junit:4.12'
    testCompile 'org.springframework:spring-test'
    testCompile 'org.mockito:mockito-core'
    
    compile 'org.jooq:jooq'
    
    jooqRuntime 'com.h2database:h2:1.4.177'
    compile 'com.h2database:h2:1.4.177'
    compile 'commons-dbcp:commons-dbcp'
        
}